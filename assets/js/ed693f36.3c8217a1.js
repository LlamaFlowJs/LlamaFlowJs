"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5747],{95599:(e,r,d)=>{d.r(r),d.d(r,{assets:()=>m,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var n=d(65723),a=d(43327),l=d(15120);const t='import { SimpleDirectoryReader } from "llamaflowjs/readers/SimpleDirectoryReader";\n// or\n// import { SimpleDirectoryReader } from \'llamaflowjs\'\n\nconst reader = new SimpleDirectoryReader();\nconst documents = await reader.loadData("../data");\n\ndocuments.forEach((doc) => {\n  console.log(`document (${doc.id_}):`, doc.getText());\n});\n',o='import type { Document, Metadata } from "llamaflowjs";\nimport { FileReader } from "llamaflowjs";\nimport {\n  FILE_EXT_TO_READER,\n  SimpleDirectoryReader,\n} from "llamaflowjs/readers/SimpleDirectoryReader";\nimport { TextFileReader } from "llamaflowjs/readers/TextFileReader";\n\nclass ZipReader extends FileReader {\n  loadDataAsContent(fileContent: Uint8Array): Promise<Document<Metadata>[]> {\n    throw new Error("Implement me");\n  }\n}\n\nconst reader = new SimpleDirectoryReader();\nconst documents = await reader.loadData({\n  directoryPath: "../data",\n  defaultReader: new TextFileReader(),\n  fileExtToReader: {\n    ...FILE_EXT_TO_READER,\n    zip: new ZipReader(),\n  },\n});\n\ndocuments.forEach((doc) => {\n  console.log(`document (${doc.id_}):`, doc.getText());\n});\n',i={},s="Loader",c={id:"modules/data_loaders/index",title:"Loader",description:"Before you can start indexing your documents, you need to load them into memory.",source:"@site/docs/modules/data_loaders/index.mdx",sourceDirName:"modules/data_loaders",slug:"/modules/data_loaders/",permalink:"/LlamaFlowJs/modules/data_loaders/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"mySidebar",previous:{title:"Prompts",permalink:"/LlamaFlowJs/modules/prompt/"},next:{title:"LlamaParse",permalink:"/LlamaFlowJs/modules/data_loaders/llama_parse/"}},m={},p=[{value:"SimpleDirectoryReader",id:"simpledirectoryreader",level:2},{value:"Example",id:"example",level:3},{value:"API Reference",id:"api-reference",level:2}];function u(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",ul:"ul",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h1,{id:"loader",children:"Loader"}),"\n",(0,n.jsx)(r.p,{children:"Before you can start indexing your documents, you need to load them into memory."}),"\n",(0,n.jsx)(r.h2,{id:"simpledirectoryreader",children:"SimpleDirectoryReader"}),"\n",(0,n.jsx)(r.p,{children:(0,n.jsx)(r.a,{href:"https://stackblitz.com/github/run-llama/llamaflowTS/tree/main/examples/readers?file=src/simple-directory-reader.ts&title=Simple%20Directory%20Reader",children:(0,n.jsx)(r.img,{src:"https://developer.stackblitz.com/img/open_in_stackblitz.svg",alt:"Open in StackBlitz"})})}),"\n",(0,n.jsxs)(r.p,{children:["llamaflowjs supports easy loading of files from folders using the ",(0,n.jsx)(r.code,{children:"SimpleDirectoryReader"})," class."]}),"\n",(0,n.jsx)(r.p,{children:"It is a simple reader that reads all files from a directory and its subdirectories."}),"\n",(0,n.jsx)(l.A,{language:"ts",children:t}),"\n",(0,n.jsxs)(r.p,{children:["Currently, it supports reading ",(0,n.jsx)(r.code,{children:".txt"}),", ",(0,n.jsx)(r.code,{children:".pdf"}),", ",(0,n.jsx)(r.code,{children:".csv"}),", ",(0,n.jsx)(r.code,{children:".md"}),", ",(0,n.jsx)(r.code,{children:".docx"}),", ",(0,n.jsx)(r.code,{children:".htm"}),", ",(0,n.jsx)(r.code,{children:".html"}),", ",(0,n.jsx)(r.code,{children:".jpg"}),", ",(0,n.jsx)(r.code,{children:".jpeg"}),", ",(0,n.jsx)(r.code,{children:".png"})," and ",(0,n.jsx)(r.code,{children:".gif"})," files, but support for other file types is planned."]}),"\n",(0,n.jsx)(r.p,{children:"You can modify the reader three different ways:"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"overrideReader"})," overrides the reader for all file types, including unsupported ones."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"fileExtToReader"})," maps a reader to a specific file type. Can override reader for existing file types or add support for new file types."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"defaultReader"})," sets a fallback reader for files with unsupported extensions. By default it is ",(0,n.jsx)(r.code,{children:"TextFileReader"}),"."]}),"\n"]}),"\n",(0,n.jsxs)(r.p,{children:["SimpleDirectoryReader supports up to 9 concurrent requests. Use the ",(0,n.jsx)(r.code,{children:"numWorkers"})," option to set the number of concurrent requests. By default it runs in sequential mode, i.e. set to 1."]}),"\n",(0,n.jsx)(r.h3,{id:"example",children:"Example"}),"\n",(0,n.jsx)(l.A,{language:"ts",showLineNumbers:!0,metastring:"{8-12,17-21}",children:o}),"\n",(0,n.jsx)(r.h2,{id:"api-reference",children:"API Reference"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.a,{href:"/LlamaFlowJs/api/classes/SimpleDirectoryReader",children:"SimpleDirectoryReader"})}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}}}]);