"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9231],{8378:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>c,default:()=>x,frontMatter:()=>i,metadata:()=>d,toc:()=>u});var o=t(65723),s=t(43327),r=t(15120),a=t(40253);const i={sidebar_position:2},c="Vector Index",d={id:"examples/vector_index",title:"Vector Index",description:"",source:"@site/docs/examples/vector_index.mdx",sourceDirName:"examples",slug:"/examples/vector_index",permalink:"/examples/vector_index",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"mySidebar",previous:{title:"Chat Engine",permalink:"/examples/chat_engine"},next:{title:"Summary Index",permalink:"/examples/summary_index"}},m={},u=[];function l(e){const n={h1:"h1",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"vector-index",children:"Vector Index"}),"\n",(0,o.jsx)(r.A,{language:"ts",children:a.A})]})}function x(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},40253:(e,n,t)=>{t.d(n,{A:()=>o});const o='import fs from "node:fs/promises";\n\nimport {\n  Document,\n  MetadataMode,\n  NodeWithScore,\n  VectorStoreIndex,\n} from "llamaflowjs";\n\nasync function main() {\n  // Load essay from abramov.txt in Node\n  const path = "node_modules/llamaflowjs/examples/abramov.txt";\n\n  const essay = await fs.readFile(path, "utf-8");\n\n  // Create Document object with essay\n  const document = new Document({ text: essay, id_: path });\n\n  // Split text and create embeddings. Store them in a VectorStoreIndex\n  const index = await VectorStoreIndex.fromDocuments([document]);\n\n  // Query the index\n  const queryEngine = index.asQueryEngine();\n  const { response, sourceNodes } = await queryEngine.query({\n    query: "What did the author do in college?",\n  });\n\n  // Output response with sources\n  console.log(response);\n\n  if (sourceNodes) {\n    sourceNodes.forEach((source: NodeWithScore, index: number) => {\n      console.log(\n        `\\n${index}: Score: ${source.score} - ${source.node.getContent(MetadataMode.NONE).substring(0, 50)}...\\n`,\n      );\n    });\n  }\n}\n\nmain().catch(console.error);\n'}}]);